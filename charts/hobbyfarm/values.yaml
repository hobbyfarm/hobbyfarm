admin:  # defaults for admin service
  image: hobbyfarm/admin-ui:v3.2.5
  # configMapName: admin-config
  config:
    title: HobbyFarm Administration
    favicon: /assets/default/favicon.png
    login:
      # for custom logo it has to be an SVG - also applies to admin ui
      # example - kubectl create configmap rgs-logo -n hobbyfarm --from-file=rancher-labs-stacked-color.svg=rfed-logo-stacked.svg
      customlogo:  # secret that contains svg as file
      logo: /assets/default/rancher-labs-stacked-color.svg
      background: assets/default/vault.jpg
    logo: /assets/default/logo.svg

ui:  # defaults for UI service
  image: hobbyfarm/ui:v3.2.5
  configMapName: ui-config
  config:
    title: HobbyFarm Learn
    favicon: /assets/default/favicon.png
    login:
      # for custom logo it has to be an SVG - also applies to admin ui
      # example - kubectl create configmap rgs-logo -n hobbyfarm --from-file=rancher-labs-stacked-color.svg=rfed-logo-stacked.svg
      customlogo:  # secret that contains svg as file
      logo: /assets/default/rancher-labs-stacked-color.svg
      background: /assets/default/login_container_farm.svg
    logo: /assets/default/logo.svg
    about:
      title: About HobbyFarm
      body: HobbyFarm is a browser-based technology training tool developed at github.com/hobbyfarm
  # custom: |
    # .custom-css {
      # /* Some custom css */
    # }
accesscode:
  image: hobbyfarm/accesscode-service:v3.2.5
  replicas: 1
  logLevel: "0"
  serviceAccountName: "hobbyfarm-accesscode"
authn:
  image: hobbyfarm/authn-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-authn"
authr:
  image: hobbyfarm/authr-service:v3.2.5
  replicas: 1
  logLevel: "0"
  serviceAccountName: "hobbyfarm-authr"
conversion:
  image: hobbyfarm/conversion-service:v3.2.5
  containerPort: 444
  servicePort: 443  # needs to remain 443, see https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definition-versioning/#deploy-the-conversion-webhook-servicev2
  serviceAccountName: "hobbyfarm-conversion"
course:
  image: hobbyfarm/course-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-course"
dbconfig:
  image: hobbyfarm/dbconfig-service:v3.2.5
  replicas: 1
  logLevel: "0"
  serviceAccountName: "hobbyfarm-dbconfig"
environment:
  image: hobbyfarm/environment-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-environment"
progress:
  image: hobbyfarm/progress-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-progress"
rbac:
  image: hobbyfarm/rbac-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-rbac"
  installRBACRoles: false
scenario:
  image: hobbyfarm/scenario-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-scenario"
scheduledevent:
  image: hobbyfarm/scheduledevent-service:v3.2.5
  replicas: 1
  controllerWorkerThreadCount: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-scheduledevent"
session:
  image: hobbyfarm/session-service:v3.2.5
  replicas: 1
  controllerWorkerThreadCount: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-session"
setting:
  image: hobbyfarm/setting-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-setting"
# https://github.com/rancher/terraform-controller
# You will need a module in order for terraform to work. See /docs/README.md for examples
terraform:
  enabled: false
  executor:
    image: rancher/terraform-controller-executor
    tag: "v0.0.13-alpha1"
  controller:
    image: rancher/terraform-controller
    tag: "v0.0.13-alpha1"
    threads: 2
  service:
    image: hobbyfarm/terraform-service:v3.2.5
    replicas: 1
    controllerWorkerThreadCount: 1
    logLevel: "0"
    serviceAccountName: "hobbyfarm-terraform"
user:
  image: hobbyfarm/user-service:v3.2.5
  replicas: 1
  controllerWorkerThreadCount: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-user"
scoreservice:
  image: hobbyfarm/score-service:master
  logLevel: "0"
  apiPort: 80
  replicas: 0
vm:
  image: hobbyfarm/vm-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-vm"
vmclaim:
  image: hobbyfarm/vmclaim-service:v3.2.5
  replicas: 1
  controllerWorkerThreadCount: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-vmclaim"
vmset:
  image: hobbyfarm/vmset-service:v3.2.5
  replicas: 1
  controllerWorkerThreadCount: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-vmset"
vmtemplate:
  image: hobbyfarm/vmtemplate-service:v3.2.5
  replicas: 1
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-vmtemplate"

gargantua:
  image: hobbyfarm/gargantua:v3.2.5
  logLevel: "0"
  apiPort: 80
  serviceAccountName: "hobbyfarm-gargantua"

general:
  dynamicBaseNamePrefix: "dynamic"  # in use by dbconfig-service and session-service
  scheduledBaseNamePrefix: "scheduled"  # in use by scheduledevent-service and session-service
  enableReflection: false  # enable/disable reflection for gRPC services... mainly for debugging in dev environments

# Use guacamole to provision windows VMs (optional)
# guac:
#   image: ***to be published***
#   guacd:
#     image: guacamole/guacd


shell:
  replicas: 1

# use insecure protocols (e.g., for local development)
insecure: false

ingress:
  enabled: false
  className: ""
  annotations: {}
  tls:
    enabled: true
    # secrets:
    #   backend: backend-tls-secret # api/controller server
    #   admin: admin-tls-secret # admin ui
    #   ui: ui-tls-secret # user frontend "learn" ui
    #   shell: shell-tls-secret # shell proxy

  hostnames:
    # ui: example.com
    # admin: admin.example.com
    # backend: hf.example.com
    # shell: shell.example.com

users:
  admin:
    enabled: false
    # default value to Sup3r@dmin
    password: $2a$10$9ToKMT37Z7K70xbCVnW9KOzEuPq0JyW/rA06gsukD4U9YfKFjMXTe
